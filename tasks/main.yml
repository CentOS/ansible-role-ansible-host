---
- name: Importing specific distro variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
  tags:
    - vars

- name: Installing required repositories 
  ansible.builtin.yum:
    name: "{{ ansible_repo_pkg }}"
    state: installed
  when: ansible_repo  
  tags:
    - pkgs

- name: Ensuring some pkgs are installed
  ansible.builtin.yum: 
    name: "{{ ansible_pkgs_list }}" 
    state: latest
  tags:
    - pkgs


- name: Creating the ansible inventory owner
  ansible.builtin.user:
    comment: "Automation bot for Ansible - {{ item.name }} workspace "
    name: "{{ item.owner }}"
    state: present
    home: "{{ item.homedir }}"
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.owner }}"
  tags:
    - userenv

- name: Ensuring we have pip pkgs for ansible-core compat
  ansible.builtin.pip:
    executable: pip3.8
    name: "{{ ansible_pip_pkgs }}"
    state: present
    extra_args: --user
  become_user: "{{ item.owner }}"  
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.owner }}"
  tags:
    - userenv

- name: Ensuring we can drop key in correct dir
  ansible.builtin.file:
    path: "{{ item.homedir }}/.ssh"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: 0700
  with_items: "{{ ansible_configs }}"  
  when: item.ssh_priv_key is defined
  loop_control:
    label: "{{ item.owner }}"
  tags:
    - creds

- name: Ensuring we'll unlock in agent
  ansible.builtin.blockinfile:
    path: "{{ item.homedir }}/.bashrc"
    block: |
      # Unlocking on first login, asking for passphrase
      if [ ! -S ~/.ssh/ssh_auth_sock ]; then
        echo "[+] Unlocking keys for ansible automation ...."
        eval $(ssh-agent)
        ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
      fi
      export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
      ssh-add -l > /dev/null || ssh-add
  with_items: "{{ ansible_configs }}"
  when: item.ssh_priv_key is defined
  loop_control:
    label: "{{ item.owner }}"
  tags:
    - bash

- name: Distributing keys
  copy:
    src: "{{ pkistore }}/ssh/{{ item.ssh_priv_key }}"
    dest: "{{ item.homedir }}/.ssh/id_rsa"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: 0600
  with_items: "{{ ansible_configs }}"  
  when: item.ssh_priv_key is defined
  loop_control:
    label: "{{ item.owner }}"
  tags:
    - creds

- name: Distributing vault file (if defined)
  copy:
    content: "{{ item.vault_password }}"
    dest: "{{ item.vault_file }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: 0640
  with_items: "{{ ansible_configs }}"  
  when: item.vault_file is defined
  loop_control:
    label: "{{ item.owner }}"
  tags:
    - vault


- name: Ensuring ansible can log to a specific directory per inventory
  ansible.builtin.file:
    path: "/var/log/ansible/{{ item.name }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: '2770'
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.owner }}"
  when: item.log_to_disk

- name: Configuring logrotate if needed
  ansible.builtin.template:
    src: logrotate.j2
    dest: "/etc/logrotate.d/ansible-{{ item.name }}"
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.owner }}"
  when: item.log_to_disk
   
- name: Ensuring we have a local creds store for git-crypt keys
  ansible.builtin.file:
    path: "{{ item.credstore }}"
    state: directory
    owner: "{{ item.owner }}"
    mode: 0700
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - creds

- name: Distributing the needed git-crypt keys to unlock repositories
  copy:
    src: "{{ pkistore }}/git/{{ item.1.git_crypt_key }}"
    dest: "{{ item.0.credstore }}/{{ item.1.git_crypt_key }}"
    owner: "{{ item.0.owner }}"
    group: "{{ item.0.owner }}"
  with_subelements: 
    - "{{ ansible_configs }}"
    - scm_repos
  when: item.1.git_crypted 
  loop_control:
    label: "{{ item.1.name }}"
  tags:
    - creds

- name: Ensuring we have correct place for all ansible files
  ansible.builtin.file:
    path: "{{ item.base_path }}"
    state: directory
    mode: 0750
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.base_path }}"

- name: Ensuring mitogen is available
  ansible.builtin.git:
    repo: "{{ mitogen_scm_url }}"
    dest: "{{ item.base_path }}/mitogen-{{ mitogen_tag }}"
    version: "{{ mitogen_tag }}"
    force: yes
  become: True
  become_user: "{{ item.owner }}"
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - mitogen

- name: Symlinking mitogen to correct version/tag
  ansible.builtin.file:
    state: link
    src: "{{ item.base_path }}/mitogen-{{ mitogen_tag }}"
    path: "{{ item.base_path }}/mitogen"
  become_user: "{{ item.owner }}"
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - mitogen

- name: Patching mitogen if needed
  ansible.posix.patch:
    src: "mitogen-patches/{{ item.1 }}"
    basedir: "{{ item.0.base_path }}/mitogen"
    strip: 1
  with_nested:
    - "{{ ansible_configs }}"
    - "{{ mitogen_patch_list }}"
  tags:
    - mitogen
  when: mitogen_needs_patches
  loop_control:
    label: "{{ item.1 }}"


- name: Checking out all needed SCM repositories
  ansible.builtin.git:
    dest: "{{ item.0.base_path }}/{{ item.1.name }}"
    repo: "{{ item.1.url }}"
    accept_hostkey: yes
  become: True
  become_user: "{{ item.0.owner }}"
  with_subelements:
    - "{{ ansible_configs }}"
    - scm_repos
  loop_control:
    label: "{{ item.1.name }}"

- name: Unlocking git-crypted SCM repositories if needed
  ansible.builtin.command: "git-crypt unlock {{ item.0.credstore }}/{{ item.1.git_crypt_key }}"
  args:
    chdir: "{{ item.0.base_path }}/{{ item.1.name }}"
  become: True
  become_user: "{{ item.0.owner }}"
  with_subelements:
    - "{{ ansible_configs }}"
    - scm_repos
  when: item.1.git_crypted   
  loop_control:
    label: "{{ item.1.name }}"

- name: Mandatory symlinks 
  ansible.builtin.file:
    state: link
    src: "{{ item[0].base_path }}/playbooks/{{ item[1] }}"
    path: "{{ item[0].base_path }}/{{ item[1] }}"
  with_nested:
    - "{{ ansible_configs }}"
    - [ 'handlers', 'files', 'vars', 'tasks', 'templates' ]
  loop_control:
    label: "{{ item[1] }}"

- name: Configuring ansible.cfg 
  ansible.builtin.template:
    src: ansible.cfg.j2
    dest: "{{ item.base_path }}/ansible.cfg"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: '0640'
  with_items: "{{ ansible_configs }}"   
  loop_control:
     label: "{{ item.name }}"
  tags:
    - config
    - vault

- name: Creating facts caching directory for ansible
  ansible.builtin.file:
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: '2770'
    path: "{{ item.base_path}}/.ansible_cache"
  with_items: "{{ ansible_configs }}" 
  loop_control:
     label: "{{ item.name }}"         

- name: Correct symlink for requirements.yml in basedir
  ansible.builtin.file:
    state: link
    src: "{{ item.base_path }}/playbooks/requirements-{{ item.env }}.yml"
    dest: "{{ item.base_path }}/requirements.yml"
  with_items:
    - "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.name }}"

- name: Fetching all needed roles and collections
  ansible.builtin.command: "/home/{{ item.owner }}/.local/bin/ansible-roles-ctl install"
  args:
    chdir: "{{ item.base_path }}"
  become: True
  become_user: "{{ item.owner }}"
  with_items: "{{ ansible_configs }}" 
  loop_control:
    label: "{{ item.name }}"       

- name: Updating all roles based on requirements.yml
  ansible.builtin.command: "/home/{{ item.owner }}/.local/bin/ansible-roles-ctl update"
  args:
    chdir: "{{ item.base_path }}"
  become: True
  become_user: "{{ item.owner }}"
  with_items: "{{ ansible_configs }}" 
  loop_control:
    label: "{{ item.name }}"       

- name: Mandatory symlink for roles
  ansible.builtin.file:
    state: link
    src: "{{ item.base_path }}/roles"
    path: "{{ item.base_path }}/playbooks/roles"    
  with_items:
    - "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.name }}"

- name: Ansible wrapper script per inventory
  ansible.builtin.template:
    src: tobisna-wrapper.j2
    dest: "{{ item.base_path }}/tobisna-wrapper"
    mode: 0750
    owner: "{{ item.owner }}"
  with_items:
    - "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - wrapper

- name: Interactive Ansible on demand script per inventory
  ansible.builtin.template:
    src: ansible-ara-run.j2
    dest: "{{ item.base_path }}/ansible-ara-run"
    mode: 0750
    owner: "{{ item.owner }}"
  with_items:
    - "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - wrapper
  
- name: Enabling ansible ping/refresh facts in cache
  ansible.builtin.cron:
    name: "{{ item.name }} ansible facts refresh"
    minute: "{{ item.cron_refresh_minute }}"
    hour: "{{ item.cron_refresh_hour }}"
    job: " {{ item.base_path }}/tobisna-wrapper -r"
    user: "{{ item.owner }}"
  with_items:
    - "{{ ansible_configs }}"
  when: item.cron
  loop_control:
    label: "{{ item.name }}"
  tags:
    - cron

- name: Enabling ansible regular roles play
  ansible.builtin.cron:
    name: "{{ item.name }} ansible roles play"
    minute: "{{ item.cron_roles_play_minute }}"
    hour: "{{ item.cron_roles_play_hour }}"
    job: " {{ item.base_path }}/tobisna-wrapper -p"
    user: "{{ item.owner }}"
  with_items:
    - "{{ ansible_configs }}"
  when: item.cron 
  loop_control:
    label: "{{ item.name }}"
  tags:
    - cron

- name: ARA setup
  ansible.builtin.include_tasks: ara.yml
  when: ansible_use_ara
  tags:
    - ara
