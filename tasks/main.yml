---
- name: Installing required repositories 
  yum:
    state: installed
    name: "{{ ansible_repo_pkg }}"

- name: Ensuring some pkgs are installed 
  yum:
    state: latest
    name: "{{ item }}"
  with_items:
    - ansible
    - git
    - git-crypt
    - GitPython

- name: Creating the ansible inventory owner
  user:
    comment: "Automation bot for Ansible - {{ item.name }} workspace "
    name: "{{ item.owner }}"
    state: present
    home: "{{ item.homedir }}"
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.owner }}"

- name: Ensuring ansible can log to a specific directory per inventory
  file:
    path: "/var/log/ansible/{{ item.name }}"
    state: directory
    owner: "{{ item.owner }}"
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.owner }}"
  when: item.log_to_disk

- name: Configuring logrotate if needed
  template:
    src: logrotate.j2
    dest: "/etc/logrotate.d/ansible-{{ item.name }}"
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.owner }}"
  when: item.log_to_disk

   
- name: Ensuring we have a local creds store for git-crypt keys
  file:
    path: "{{ item.credstore }}"
    state: directory
    owner: "{{ item.owner }}"
    mode: 0700
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - creds

- name: Distributing the needed git-crypt keys to unlock repositories
  copy:
    src: "{{ pkistore }}/git/{{ item.1.git_crypt_key }}"
    dest: "{{ item.0.credstore }}/{{ item.1.git_crypt_key }}"
  with_subelements: 
    - "{{ ansible_configs }}"
    - scm_repos
  when: item.1.git_crypted 
  loop_control:
    label: "{{ item.1.name }}"
  tags:
    - creds

- name: Ensuring we have correct place for all ansible files
  file:
    path: "{{ item.base_path }}"
    state: directory
    mode: 0750
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.base_path }}"

- name: Ensuring mitogen is available
  git:
    repo: "{{ mitogen_scm_url }}"
    dest: "{{ item.base_path }}/mitogen-{{ mitogen_tag }}"
    version: "{{ mitogen_tag }}"
  become: True
  become_user: "{{ item.owner }}"
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.name }}"

- name: Symlinking mitogen to correct version/tag
  file:
    state: link
    src: "{{ item.base_path }}/mitogen-{{ mitogen_tag }}"
    path: "{{ item.base_path }}/mitogen"
  become_user: "{{ item.owner }}"
  with_items: "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.name }}"

- name: Checking out all needed SCM repositories
  git:
    dest: "{{ item.0.base_path }}/{{ item.1.name }}"
    repo: "{{ item.1.url }}"
    accept_hostkey: yes
  become: True
  become_user: "{{ item.0.owner }}"
  with_subelements:
    - "{{ ansible_configs }}"
    - scm_repos
  loop_control:
    label: "{{ item.1.name }}"

- name: Unlocking git-crypted SCM repositories if needed
  command: "git-crypt unlock {{ item.0.credstore }}/{{ item.1.git_crypt_key }}"
  args:
    chdir: "{{ item.0.base_path }}/{{ item.1.name }}"
  become: True
  become_user: "{{ item.0.owner }}"
  with_subelements:
    - "{{ ansible_configs }}"
    - scm_repos
  when: item.1.git_crypted   
  loop_control:
    label: "{{ item.1.name }}"

- name: Mandatory symlinks 
  file:
    state: link
    src: "{{ item[0].base_path }}/playbooks/{{ item[1] }}"
    path: "{{ item[0].base_path }}/{{ item[1] }}"
  with_nested:
    - "{{ ansible_configs }}"
    - [ 'handlers', 'files', 'vars', 'tasks', 'templates' ]
  loop_control:
    label: "{{ item[1] }}"

- name: Configuring ansible.cfg 
  template:
    src: ansible.cfg.j2
    dest: "{{ item.base_path }}/ansible.cfg"
  with_items: "{{ ansible_configs }}"   
  loop_control:
     label: "{{ item.name }}"         

- name: Ensuring we have local ansible-roles-ctl tool
  copy:
    src: ansible-roles-ctl
    dest: /usr/bin/ansible-roles-ctl
    mode: 0755

- name: Correct symlink for requirements.yml in basedir
  file:
    state: link
    src: "{{ item.base_path }}/playbooks/requirements-{{ item.env }}.yml"
    dest: "{{ item.base_path }}/requirements.yml"
  with_items:
    - "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.name }}"

- name: Fetching all needed roles
  command: "ansible-roles-ctl install"
  args:
    chdir: "{{ item.base_path }}"
  become: True
  become_user: "{{ item.owner }}"
  with_items: "{{ ansible_configs }}" 
  loop_control:
    label: "{{ item.name }}"       

- name: Upadating all roles based on requirements.yml
  command: "ansible-roles-ctl update"
  args:
    chdir: "{{ item.base_path }}"
  become: True
  become_user: "{{ item.owner }}"
  with_items: "{{ ansible_configs }}" 
  loop_control:
    label: "{{ item.name }}"       

- name: Mandatory symlink for roles
  file:
    state: link
    src: "{{ item.base_path }}/roles"
    path: "{{ item.base_path }}/playbooks/roles"
  with_items:
    - "{{ ansible_configs }}"
  loop_control:
    label: "{{ item.name }}"

